#Registro por webcam y teclado del tiempo trabajado por el empleado.

#Por David Ruiz
#Puedes usar mi script siempre y cuando me des crÃ©ditos en mis redes sociales @viajatech
#pip install numpy opencv-python pynput

import cv2
import time
import numpy as np
from pynput import keyboard
from datetime import datetime

class WorkMonitor:
    def __init__(self):
        self.working_time = 0
        self.idle_time = 0
        self.start_time = time.time()
        self.key_count = 0
        self.key_counts = []
        self.capture_interval = 60  # 1 minute
        self.video_file = f'work_session_{datetime.now().strftime("%Y%m%d_%H%M%S")}.mp4'
        self.log_file = f'work_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'

        # Initialize video capture and writer
        self.cap = cv2.VideoCapture(0)
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        self.out = cv2.VideoWriter(self.video_file, fourcc, 20.0, (640, 480))

        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.background = self.get_background_frame()

        # Setup keyboard listener
        self.listener = keyboard.Listener(on_press=self.on_key_press)
        self.listener.start()

    def get_background_frame(self):
        time.sleep(2)  # Allow camera to warm up
        ret, frame = self.cap.read()
        return cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) if ret else None

    def detect_movement(self, frame, threshold=25):
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        diff = cv2.absdiff(self.background, gray_frame)
        _, thresh = cv2.threshold(diff, threshold, 255, cv2.THRESH_BINARY)
        return np.sum(thresh) > 0

    def on_key_press(self, key):
        self.key_count += 1

    def log_data(self):
        elapsed_time = time.time() - self.start_time
        minutes = int(elapsed_time // 60)
        hours = int(minutes // 60)
        average_keys_minute = self.key_count / max(1, minutes)
        average_keys_ten_minutes = self.key_count / max(1, (minutes / 10))
        average_keys_hour = self.key_count / max(1, hours)

        with open(self.log_file, 'a') as f:
            f.write(f"Time: {elapsed_time:.2f}s\n")
            f.write(f"Working Time: {self.working_time / 20:.2f}s\n")
            f.write(f"Idle Time: {self.idle_time / 20:.2f}s\n")
            f.write(f"Keys Pressed: {self.key_count}\n")
            f.write(f"Average Keys per Minute: {average_keys_minute:.2f}\n")
            f.write(f"Average Keys per 10 Minutes: {average_keys_ten_minutes:.2f}\n")
            f.write(f"Average Keys per Hour: {average_keys_hour:.2f}\n")
            f.write("\n")

    def run(self):
        while True:
            ret, frame = self.cap.read()
            if not ret:
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.3, 5)

            for (x, y, w, h) in faces:
                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

            if self.detect_movement(frame):
                self.working_time += 1
                cv2.rectangle(frame, (0, 0, frame.shape[1], frame.shape[0]), (0, 255, 0), 10)
            else:
                self.idle_time += 1
                cv2.rectangle(frame, (0, 0, frame.shape[1], frame.shape[0]), (0, 0, 255), 10)

            elapsed_time = time.time() - self.start_time
            cv2.putText(frame, f"Working time: {self.working_time//20} sec", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, f"Idle time: {self.idle_time//20} sec", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
            cv2.putText(frame, f"Elapsed time: {int(elapsed_time)} sec", (10, 110), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.putText(frame, f"Keys pressed: {self.key_count}", (10, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

            self.out.write(frame)
            cv2.imshow('Work Monitoring', frame)

            if cv2.waitKey(1) & 0xFF == 27:  # ESC key
                break

        self.cap.release()
        self.out.release()
        cv2.destroyAllWindows()
        self.listener.stop()
        self.log_data()

if __name__ == "__main__":
    monitor = WorkMonitor()
    monitor.run()


